; VMware Log Insight Agent configuration. Please save as UTF-8 if you use non-ASCII names / values !
; Actual configuration is this file joined with settings from server to form liagent-effective.ini

; Replace the <Ip or FQDN of Log Insight> parameter with Log Insight Ip of FQDN name. 
[server]
hostname=<Ip or FQDN of Log Insight>

; Replace the “FQDN_localhost_need_update” parameter located after agent_name with the name you’d like to reference the current instance to be presented on Log Insight (for example, you can use hostname for the VA) 
[common|global]
tags={"product":"vrb", "agent_name":"FQDN_localhost_need_update"}

[filelog|vrb-ItfmServer]
directory=/var/log/vrb/itfm-server
include=*.log
tags={"service":"itfm_server"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-itfmserver-parser
; itfm server log parser

[parser|vrb-itfmserver-parser]
base_parser=clf
format=%t %{priority}i [%{thread}i] %i - %M
field_decoder={"log_message":"vrb-itfm-srever-audit-request-decoder"}
next_parser=vrb-itfmserver-parser1
; itfm server log parser 1

[parser|vrb-itfmserver-parser1]
base_parser=clf
format=%t %{priority}i [%{thread}i] %i - %i \"{[%{url}i],methods=[%m],produces=[%{produces}i]}\" %M
; itfm server audit request decoder

[parser|vrb-itfm-srever-audit-request-decoder]
base_parser=clf
format=%{request_method}i|%{requested_url}i|%{user_info}i|%M
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; itfm tomcat log as part of data collector

[filelog|vrb-ItfmCatalina-1]
directory=/usr/local/tcserver/vfabric-tc-server-standard/itbm-server/logs
include=localhost*;catalina.out
tags={"service":"itfm_catalina"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-itfmcatalina-parser

; Keep Second configuration of the tomcat which is functional depends of the deployment type
[filelog|vrb-ItfmCatalina-2]
directory=/usr/local/tomcat/itbm-server/logs
include=localhost*;catalina.out
tags={"service":"itfm_catalina"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-itfmcatalina-parser

; vami access log parsing

[parser|vrb-itfmcatalina-parser]
base_parser=clf
next_parser=vrb-itfmcatalina-parser1
; itfm tomcat log parser

[parser|vrb-itfmcatalina-parser1]
base_parser=clf
format=%i %{priority}i [%{thread}i] %i - %i \"{[%{url}i],methods=[%m],produces=[%{produces}i]}\" %M
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  dc tomcat log  as part of data collector

[filelog|vrb-DcCatalina-1]
directory=/usr/local/tcserver/vfabric-tc-server-standard/itbm-data-collector/logs
include=*
tags={"service":"dc_catalina"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-tomcat-parser

; Keep Second configuration of the tomcat which is functional depends of the deployment type
[filelog|vrb-DcCatalina-2]
directory=/usr/local/tomcat/itbm-data-collector/logs
include=*
tags={"service":"dc_catalina"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-tomcat-parser

; vrb tomcat parser

[parser|vrb-tomcat-parser]
base_parser=clf
format=%i %i %i [%t] "%r" %s %b
exclude_fields=request
field_decoder={"request":"vrb-request-decoder"}

[parser|vrb-request-decoder]
base_parser=csv
delimiter=" "
fields=request_method,requested_url,http_ver
field_decoder={"http_ver":"vrb-access-ver-parser"}

[parser|vrb-access-ver-parser]
base_parser=csv
delimiter="/"
fields=http_proto_name,http_ver
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  data collector log

[filelog|vrb-DataCollector]
directory=/var/log/vrb/data-collector
include=*
tags={"service":"data_collector"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-datacollector-parser1
; datacollector parser1

[parser|vrb-datacollector-parser1]
base_parser=clf
format=%t %{priority}i [%{data_collector_info}i)] %i - %M
exclude_fields=data_collector_info
field_decoder={"data_collector_info":"vrb-data-collector-info-decoder","log_message":"vrb-message-decoder"}
next_parser=vrb-datacollector-parser2
; datacollector parser2

[parser|vrb-datacollector-parser2]
base_parser=clf
format=%t %{priority}i [%{thread}i] %i - %M
next_parser=vrb-datacollector-parser3
; datacollector parser3

[parser|vrb-datacollector-parser3]
base_parser=clf
format=%t %{priority}i [%{thread}i] %i - %i \"{[%{url}i],methods=[%m],produces=[%{produces}i]}\" %M
; datacollector service/endpoint decoder

[parser|vrb-data-collector-info-decoder]
base_parser=clf
format=%{data_collector_service}i (%{data_collector_endpoint}i
; datacollector metric account decoder

[parser|vrb-message-decoder]
delimiter="account:"
exclude_fields=field_name1
base_parser=csv
fields=field_name1, account
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  transformer log

[filelog|vra-Transformer]
directory=/var/log/vrb/transformer
include=*
tags={"service":"transformer"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-transformer-parser
; transformer log parser

[parser|vrb-transformer-parser]
base_parser=clf
format=%t %{priority}i [%{thread}i] %i - %M
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  pricing api log

[filelog|vrb-PricingApi]
directory=/var/log/vrb
include=pricing-api.log
tags={"service":"pricing_api"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-pricingapi-parser
; pricing-api log parser

[parser|vrb-pricingapi-parser]
base_parser=clf
format=%t %{priority}i [%{thread}i] %i - %M
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  facts repo log

[filelog|vrb-FactsRepo]
directory=/var/log/vrb
include=facts-repo.log
tags={"service":"facts_repo"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-factsrepo-parser
; fact-repo log parsing

[parser|vrb-factsrepo-parser]
base_parser=clf
format=%t %{priority}i [%{thread}i] %M
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  external api log

[filelog|vrb-ExternalApi]
directory=/var/log/vrb
include=itfm-external-api.log
tags={"service":"external_api"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-itfm-external-api-parser
; itfm-external-api log parsing

[parser|vrb-itfm-external-api-parser]
base_parser=clf
format=%t %{priority}i [%{thread}i] %i - %M
field_decoder={"log_message":"vrb-api-message-decoder"}
; api messge parser

[parser|vrb-api-message-decoder]
base_parser=clf
format=%i[%{api_url}i,%i[%{method}i]}"%M
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  telemetry log

[filelog|vrb-Telemetry]
directory=/var/log/vrb
include=telemetry-client.log
tags={"service":"telemetry"}
event_marker=^(\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-telemetry-parser
; telemetry log parsing

[parser|vrb-telemetry-parser]
base_parser=clf
format=%t %{priority}i [%{thread}i] %M
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  VAMI log

[filelog|vrb-VAMI]
directory=/opt/vmware/var/log/vami
include=vami*.log
tags={"service":"vami"}
event_marker=^(\d{2}\/\d{2}\/\d{4}|\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-vami-parser
; vami log parsing

[parser|vrb-vami-parser]
base_parser=clf
format=%t [%{priority}i] %M
field_decoder={"log_message":"vrb-vami-message-decoder"}
; vami messge parser

[parser|vrb-vami-message-decoder]
base_parser=clf
format=[process id: %{process_id}i] %M
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; VAMI access log

[filelog|vrb-VAMI-access]
directory=/opt/vmware/var/log/lighttpd
include=access.log
tags={"service":"vami_access"}
event_marker=^(::f{4}|::1)
parser=vrb-vami-access-parser1
; vami access log parsing

[parser|vrb-vami-access-parser1]
base_parser=clf
format=::%i:%{source_ip}i %{destination_ip}i:%{port}i %u [%t] \"%r\" %>s %b \"%{referer}i\" \"%{user_agent}i\"
next_parser=vrb-vami-access-parser2

[parser|vrb-vami-access-parser2]
base_parser=clf
format=::%i %{destination_ip}i:%{port}i %u [%t] \"%r\" %>s %b \"%{referer}i\" \"%{user_agent}i\"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; VAMI error log

[filelog|vrb-VAMI-error]
directory=/opt/vmware/var/log/lighttpd
include=error*.log
tags={"service":"vami_error"}
event_marker=^(\d{2}\/\d{2}\/\d{4}|\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}\.\d{3}|\d{2}-[A-Z][a-z]{2}-\d{4}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
parser=vrb-vami-error-parser
; vami error log parsing

[parser|vrb-vami-error-parser]
base_parser=clf
format=%t: (%{error_line}i) %M
field_decoder={"log_message":"vrb-vami-error-message-decoder"}
; vami error messge parser

[parser|vrb-vami-error-message-decoder]
base_parser=clf
format=%{}i= %{uid}i PID = %{pid}i
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Xenon log

[filelog|vrb-Xenon]
directory=/var/log/vrb
include=vrbc-xenon-services.log*
tags={"service":"xenon"}
event_marker=^(\[\d+\]\[.\]\[\d{4}-\d{2}-\d{2})
parser=vrb-xenon-parser
; xenon log parsing

[parser|vrb-xenon-parser]
base_parser=clf
format=[%{field1}i][%{priority}i][%t][%{field2}i][%{port}i][%{operation}i][%{message}i]



